{"version":3,"sources":["images/cup.gif","images/cup1.gif","images/Cup2.gif","images/title.png","App.js","reportWebVitals.js","index.js"],"names":["SystemProgram","web3","Keypair","LAMPORTS_PER_SOL","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","admin_arr","admin_kp","admin_secret","adminAccount","window","Buffer","require","programID","PublicKey","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","poolWalletAddress","setPoolWalletAddress","stake_bal","setSelectedStakeBalance","balance","getWalletBalance","pool_bal","getPoolWalletBalance","pred","setPrediction","claimFunds","setClaimFunds","adminWalletAddress","setAdminWallet","checkIfWalletIsConnected","a","solana","isPhantom","connect","response","publicKey","toString","adminWallet","ADMIN_WALLET_ADDRESS","alert","console","error","disconnectWallet","disconnect","connectWallet","getBalance","connection","Connection","provider","getProvider","wallet","balanceOfwallet","balanceOfadminwallet","Provider","placeBet","program","Program","idl","rpc","accounts","from","to","systemProgram","programId","log","rand","Math","floor","random","compareBet","resultBet","signers","account","fetch","currentBet","boolWinner","depositfund","claimDepositFund","claimfund","imageClick","style","backgroundImage","className","onClick","type","value","onChange","e","target","renderConnectedContainer","Row","Col","md","renderwallet","id","src","Title","alt","Cup","height","Cup1","Cup2","Button","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a844bba2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cup.3848ebbb.gif\";","export default __webpack_public_path__ + \"static/media/cup1.2ef733f0.gif\";","export default __webpack_public_path__ + \"static/media/Cup2.004a2669.gif\";","export default __webpack_public_path__ + \"static/media/title.57f0dd54.png\";","import './App.css';\nimport React, {  useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Col ,Row} from 'react-bootstrap';\n\nimport Cup from './images/cup.gif';\nimport Cup1 from './images/cup1.gif'\nimport Cup2 from './images/Cup2.gif'\nimport Title from './images/title.png';\nimport kp from './keypair.json';\nimport admin_kp from './Adminkeypair.json';\n\nimport idl from './idl.json';\nimport adminWallet from './env.json';\nimport { Connection,  clusterApiUrl, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nconst { SystemProgram, Keypair, LAMPORTS_PER_SOL } = web3;\n\n// Create a keypair for the account that will hold the betting data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = Keypair.fromSecretKey(secret);\n\nconst admin_arr = Object.values(admin_kp._keypair.secretKey);\nconst admin_secret = new Uint8Array(admin_arr);\nconst adminAccount = web3.Keypair.fromSecretKey(admin_secret);\n\n\nwindow.Buffer = window.Buffer || require('buffer').Buffer;\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(\"DWJoeHYV3uGGmWbEBmgzmiZbBrjbVNPBcMBYprehjyWo\");\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nfunction App() {\n\n  const [walletAddress, setWalletAddress] = useState(null); // address of user\n  const [poolWalletAddress, setPoolWalletAddress] = useState(null);  //address of poolWallet\n  const [stake_bal, setSelectedStakeBalance] = useState(null); // sol amount that the user bets\n  const [balance, getWalletBalance] = useState(null); // total sol amount of user's wallet\n  const [pool_bal,getPoolWalletBalance] = useState(null); // total sol amount of poolWallet\n  const [pred, setPrediction] = useState(null); // predection that user bets\n  const [claimFunds, setClaimFunds] = useState(1);//set the amount of claim and deposit\n  const [adminWalletAddress, setAdminWallet] = useState(null);\n  //check if the phantom wallet is connected\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n  \n      if (solana) {\n        if (solana.isPhantom) {\n          const response = await solana.connect();\n          setWalletAddress(response.publicKey.toString());\n          setPoolWalletAddress(adminAccount.publicKey.toString());\n          setAdminWallet(adminWallet.ADMIN_WALLET_ADDRESS);\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const disconnectWallet = async () => {\n    // @ts-ignore\n    const { solana } = window;\n\n    if (walletAddress && solana) {\n      await (solana).disconnect();\n      setWalletAddress(null);\n    }\n  };\n\n  const connectWallet = async () => {\n    // console.log(adminAccount.publicKey.toString());\n    // console.log(baseAccount.publicKey.toString());\n    await checkIfWalletIsConnected();\n    await getBalance();\n    // const provider = getProvider();\n    // const program = new Program(idl, programID, provider);\n    \n    // await program.rpc.startStuffOff({\n    //   accounts: {\n    //     baseAccount: baseAccount.publicKey,\n    //     user: provider.wallet.publicKey,\n    //     systemProgram: SystemProgram.programId,\n    //   },\n    //   signers: [baseAccount],\n    // });\n    //get the balance of user's wallet\n  };\n\n  const getBalance = async () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = getProvider();\n    const publicKey = provider.wallet.publicKey;\n    const balanceOfwallet = await connection.getBalance(publicKey);\n    getWalletBalance(balanceOfwallet / LAMPORTS_PER_SOL);\n    const balanceOfadminwallet = await connection.getBalance(adminAccount.publicKey);\n    getPoolWalletBalance(balanceOfadminwallet/ LAMPORTS_PER_SOL);\n  }\n\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment,);\n    return provider;\n  }\n\n  const placeBet = async () => {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n\n\n    if(pred==null || stake_bal == null ){\n      alert(\"please select the image and stake_balance both :)\");\n      return\n    }\n    \n    //setting the betting value\n    let placeBet = await program.rpc.placeBet(pred,(stake_bal * LAMPORTS_PER_SOL).toString(), {\n        accounts: {\n            baseAccount:baseAccount.publicKey,\n            from: provider.wallet.publicKey,\n            to: adminAccount.publicKey,\n            systemProgram: SystemProgram.programId,\n        },\n    });\n    setPrediction(null);\n    setSelectedStakeBalance(null);\n    await getBalance();\n    console.log(\"place bet->\",placeBet);\n    \n\n    const min = 0;\n    const max = 2;\n    let rand = Math.floor(Math.random() * (max - min)) + min;\n\n    // generating the random number and sending to the program\n    let compareBet = await program.rpc.compareBet(rand, {\n        accounts: {\n          baseAccount:baseAccount.publicKey,\n        },\n    });\n    console.log(\"compare bet->\",compareBet);\n\n    let resultBet = await program.rpc.resultBet({\n    accounts: {\n        baseAccount:baseAccount.publicKey,\n        from: adminAccount.publicKey,\n        to: provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n    },\n    signers:  [adminAccount],\n    });\n\n    await getBalance();\n    console.log(\"result bet->\",resultBet);\n    let account = await program.account.baseAccount.fetch(baseAccount.publicKey);  \n    console.log(\"bet vec->\", account.currentBet.boolWinner);\n    if (account.currentBet.boolWinner===true){\n      alert(\"Win\");\n    } else {\n      alert(\"fail\");\n    }\n    setPrediction(null);\n\n  }\n\n  const renderNotConnectedContainer = () => (\n    <div className='right-buttons'>\n      <div className=\"vl\"></div>\n      <button className=\"connect\" onClick={connectWallet}>Connect</button>\n    </div>\n  );\n  \n  const renderConnectedContainer =  () => {\n    const provider = getProvider();\n    if (adminWalletAddress === provider.wallet.publicKey.toString()){\n      return (\n        <div className='right-buttons'>\n          <div className=\"vl\"></div>\n          <input type=\"text\" className=\"connect amount\" value = {claimFunds} onChange = {(e) => setClaimFunds(e.target.value)}/>\n          <button className=\"connect deposit\"  onClick={() => depositfund()}>Deposit</button>\n          <button className=\"connect claim\"  onClick={() => claimfund()} >Claim</button>\n          <button className=\"connect\" onClick={() => disconnectWallet()} >Disconnect</button>\n        </div>\n      );\n    } else {\n      return(\n        <div className='right-buttons'>\n          <div className=\"vl\"></div>\n          <button className=\"connect\" onClick={() => disconnectWallet()}>Disconnect</button>\n        </div>\n      );\n    }\n  }\n\n  const renderwallet = () => {\n    const provider = getProvider();\n    console.log(provider.wallet.publicKey.toString());\n    if ( provider.wallet.publicKey.toString() === adminWalletAddress){\n      return (\n        <div className='wallet'>\n          <Row>\n            <Col md={3}>\n              <h3>Wallet: {walletAddress}</h3>\n              <h3>Balance: {balance}SOL</h3>\n            </Col>\n            <Col md={6}/>\n            <Col md={3}>\n              <h3>Platform: {poolWalletAddress}</h3>\n              <h3>Balance: {pool_bal}SOL</h3>\n            </Col>\n          </Row>\n        </div>\n      );\n    } else{\n        return(\n          <div className='wallet'>\n            <h3>Wallet: {walletAddress}</h3>\n            <h3>Balance: {balance}SOL</h3>\n          </div>\n        );\n    }\n\n    \n  }\n\n\n  const depositfund = async () => {\n    //Todo withdrawfund\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n\n    await program.rpc.claimDepositFund((claimFunds * LAMPORTS_PER_SOL).toString(),{\n      accounts: {\n          baseAccount:baseAccount.publicKey,\n          from: provider.wallet.publicKey,\n          to: adminAccount.publicKey,\n          systemProgram: SystemProgram.programId,\n      },\n    });\n    setClaimFunds(0);\n    getBalance();\n    alert(\"success\");\n  }\n\n  const claimfund = async () => {\n    //Todo withdrawfund\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    await program.rpc.claimDepositFund((claimFunds * LAMPORTS_PER_SOL).toString(),{\n      accounts: {\n          baseAccount:baseAccount.publicKey,\n          from: adminAccount.publicKey,\n          to: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n      },\n      signers: [adminAccount],\n    });\n    setClaimFunds(0); \n    getBalance();\n    alert(\"success\");\n  }\n\n\n  const imageClick = (pred) => {\n    setPrediction(pred);\n  }\n\n  return (\n    <div style={{ backgroundImage: \"url(/background.png)\" }}>\n      <div className=\"nav\">\n        <span>Sol Sauce Bottle Game </span>\n        {!walletAddress && renderNotConnectedContainer()}\n        {walletAddress && renderConnectedContainer()}\n      </div>\n      <div className=\"lower-content\">\n        {walletAddress && renderwallet()}\n        <div className=\"game\">\n          <h1 className=\"title\">\n            <Row>\n              <Col md={12}>\n                <img\n                  id=\"title\"\n                  src={Title}\n                  alt=\"title\"\n                />\n              </Col>\n            </Row>\n          </h1>\n          <div className=\"content\">\n            <div className=\"content-top\">\n              <Row>\n                <Col md={4}>\n                  {pred === 0 ? (\n                    <img\n                      className=\"active\"\n                      id=\"left\"\n                      src={Cup}\n                      alt=\"left\"\n                      height=\"200\"\n                      onClick={() => imageClick(0)}\n                    />\n                  ) : (\n                    <img\n                      src={Cup}\n                      id=\"left\"\n                      alt=\"left\"\n                      height=\"200\"\n                      onClick={() => imageClick(0)}\n                    />\n                  )}\n                </Col>\n                <Col md={4}>\n                {pred === 1 ? (\n                    <img\n                      className=\"active\"\n                      id=\"center\"\n                      src={Cup1}\n                      alt=\"center\"\n                      height=\"200\"\n                      onClick={() => imageClick(1)}\n                    />\n                  ) : (\n                    <img\n                      src={Cup1}\n                      id=\"center\"\n                      alt=\"center\"\n                      height=\"200\"\n                      onClick={() => imageClick(1)}\n                    />\n                  )}\n                </Col>\n                <Col md={4}>\n                  {pred === 2 ? (\n                    <img\n                      className=\"active\"\n                      id=\"right\"\n                      src={Cup2}\n                      alt=\"Right\"\n                      height=\"200\"\n                      onClick={() => imageClick(2)}\n                    />\n                  ) : (\n                    <img\n                      src={Cup2}\n                      id=\"right\"\n                      alt=\"Right\"\n                      height=\"200\"\n                      onClick={() => imageClick(2)}\n                    />\n                  )}\n                </Col>\n              </Row>\n            </div>\n            <div className=\"content-bottom\">\n              <Row>\n                <Col md={4}>\n                  <Button\n                    variant=\"outline-success\"\n                    onClick={() => setSelectedStakeBalance(0.05)}\n                  >\n                    0.05 SOL\n                  </Button>\n                </Col>\n                <Col md={4}>\n                  <Button\n                    variant=\"outline-success\"\n                    onClick={() => setSelectedStakeBalance(0.1)}\n                  >\n                    0.10 SOL\n                  </Button>\n                </Col>\n                <Col md={4}>\n                  <Button\n                    variant=\"outline-success\"\n                    onClick={() => setSelectedStakeBalance(0.25)}\n                  >\n                    0.25 SOL\n                  </Button>\n                </Col>\n              </Row>\n              <br></br>\n              <Row>\n                <Col md={4}>\n                  <Button\n                    variant=\"outline-success\"\n                    onClick={() => setSelectedStakeBalance(0.5)}\n                  >\n                    0.50 SOL\n                  </Button>\n                </Col>\n                <Col md={4}>\n                  <Button\n                    variant=\"outline-success\"\n                    onClick={() => setSelectedStakeBalance(1)}\n                  >\n                    1.00SOL\n                  </Button>\n                </Col>\n                <Col md={4}>\n                  <Button\n                    variant=\"outline-success\"\n                    onClick={() => setSelectedStakeBalance(2)}\n                  >\n                    2.00SOL\n                  </Button>\n                </Col>\n              </Row>\n              <hr />\n              <Button variant=\"outline-info\" onClick={() => placeBet()}>\n                Find the Full Bottle!\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}